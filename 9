9. Evaluate a postfix expression using stack

def evaluate_postfix(expression):
    stack = []

    def is_operand(char):
        return char.isnumeric()

    def perform_operation(operand1, operand2, operator):
        if operator == '+':
            return operand1 + operand2
        elif operator == '-':
            return operand1 - operand2
        elif operator == '*':
            return operand1 * operand2
        elif operator == '/':
            return operand1 / operand2

    for char in expression:
        if is_operand(char):
            stack.append(int(char))
        else:
            operand2 = stack.pop()
            operand1 = stack.pop()
            result = perform_operation(operand1, operand2, char)
            stack.append(result)

    return stack[0] if stack else None

# Example usage:
postfix_expression = "34+2*"
result = evaluate_postfix(postfix_expression)
print("Postfix Expression:", postfix_expression)
print("Result:", result)
